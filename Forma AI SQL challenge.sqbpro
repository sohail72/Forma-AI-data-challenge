<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="D:/LinkedIn Exercises &amp; Certificates/sample.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="905"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,12:maintransactions"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="products" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="70"/><column index="2" value="117"/><column index="3" value="46"/><column index="4" value="74"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="segments" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="56"/><column index="2" value="81"/><column index="3" value="129"/><column index="4" value="80"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="transactions" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="2" mode="1"/></sort><column_widths><column index="1" value="62"/><column index="2" value="129"/><column index="3" value="63"/><column index="4" value="70"/><column index="5" value="66"/><column index="6" value="76"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Question 1">SELECT DISTINCT cust_id, seg_name, update_at 
FROM segments
WHERE active_flag == 'Y'
ORDER BY update_at ASC;</sql><sql name="Question 2">SELECT products.prod_id, products.prod_name, COUNT( transactions.trans_id) AS no_of_transactions
FROM products
JOIN transactions
ON transactions.prod_id = products.prod_id
WHERE transactions.trans_dt BETWEEN '2015-12-31' AND '2016-06-01'  
GROUP BY transactions.prod_id;

-- The date range clause BETWEEN is not inclusive so the date has been modified to see the results</sql><sql name="SQL 9">-- This query was used to confirm if the transactions lie in the date range given in question 2

SELECT products.prod_id, products.prod_name, COUNT( transactions.trans_id) AS no_of_transactions, 
transactions.trans_dt
FROM products
JOIN transactions
ON transactions.prod_id = products.prod_id
WHERE transactions.trans_dt BETWEEN '2015-12-31' AND '2016-06-01'
GROUP BY transactions.prod_id
ORDER BY transactions.trans_dt ASC;
</sql><sql name="Question 3">SELECT cust_id, seg_name, update_at
FROM segments
WHERE update_at &gt;= '2016-03-01'
GROUP BY cust_id  
ORDER BY update_at ASC;</sql><sql name="SQL 4">SELECT segments.seg_name, products.category, TOTAL(transactions.item_price) AS revenue
FROM transactions
JOIN products
ON transactions.prod_id = products.prod_id
JOIN segments
ON transactions.cust_id = segments.cust_id
WHERE segments.active_flag = 'Y'
GROUP BY products.prod_id
ORDER BY revenue DESC
LIMIT 1;

</sql><sql name="SQL 5">-- This query was used to check if the highest revenue was infact 607.92 in question 4

SELECT SUM(item_price) AS revenue, prod_id
FROM transactions
GROUP BY prod_id 
order by revenue desc</sql><sql name="SQL 6">-- This query is used to get insights for highest revenue with brands and category

SELECT segments.seg_name, products.category, products.brand, TOTAL(transactions.item_price) AS revenue
FROM transactions
JOIN products
ON transactions.prod_id = products.prod_id
JOIN segments
ON transactions.cust_id = segments.cust_id
GROUP BY products.prod_id
ORDER BY revenue DESC
LIMIT 5</sql><sql name="SQL 7">-- This query is used to get insights for lowest revenue with brands and category

SELECT segments.seg_name, products.category, products.brand, TOTAL(transactions.item_price) AS revenue
FROM transactions
JOIN products
ON transactions.prod_id = products.prod_id
JOIN segments
ON transactions.cust_id = segments.cust_id
GROUP BY products.prod_id
ORDER BY revenue ASC
LIMIT 5</sql><current_tab id="7"/></tab_sql></sqlb_project>
